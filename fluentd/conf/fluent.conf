# fluentd/conf/fluent.conf

# listen in TCP port
<source>
  @type forward
  port 24224
  bind 0.0.0.0
</source>
# ingest syslog messages
<source>
    @type syslog
    port 5141
    tag "syslog"
</source>
# split nginx logs by source
<match docker.nginx>
    @type rewrite_tag_filter
    <rule>
      key source
      pattern /^(.*)$/
      tag nginx.$1
    </rule>
</match>
# split mojo logs by source
<match docker.mojo>
    @type rewrite_tag_filter
    <rule>
      key source
      pattern /^(.+)$/
      tag docker.mojo.$1
    </rule>
</match>
# parse nginx access logs from stdout
<filter nginx.stdout>
    @type parser
    format nginx
    key_name log
    reserve_data true
</filter>
<filter **>
    @type parser
    format nginx
    key_name log
    reserve_data true
</filter>
<match nginx.stdout>
    @type rewrite_tag_filter
    <rule>
      key path
      pattern /^\/admin\//
      tag nginx.admin
    </rule>
    <rule>
      key path
      pattern /.+/
      tag nginx.access
    </rule>
</match>
# parse micronaut console messages
# multiline does not work as a filter, because filter does not keep state
<filter docker.micronaut>
    @type concat
    key log
    stream_identity_key container_id
    multiline_start_regexp /^(?<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}) /
    flush_interval 0
    use_first_timestamp true
</filter>
<filter docker.micronaut>
    @type parser
    key_name log
    reserve_data false
    <parse>
        @type regexp
        expression /^(?<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}) +\[(?<thread>.*?)\] +(?<level>\w+) +(?<class>[^ ]+) +- +(?<message>.*)$/im
        time_key timestamp
        time_format "%Y-%m-%d %H:%M:%S,%L"
    </parse>
</filter>
# parse mojo application logs from stdout
<filter docker.mojo.stdout>
    @type parser
    key_name log
    reserve_data false
    <parse>
        @type json
        time_key @timestamp
        time_type string
        time_format "%Y-%m-%dT%H:%M:%S.%LZ"
    </parse>
</filter>
# log4j.log
<filter log4j.log>
    @type parser
    key_name message
    reserve_data true
    <parse>
        @type regexp
        expression /ID: (?<id>\d+)\n.*?(Response-Code: (?<code>\d+)\n)?.*?Payload: (?<payload>.*?(\<(\w+:)?Consumer\>\<(\w+:)?UniqueID\>(?<flowLinkId>[a-z0-9\-]+)\<\/(\w+:)?UniqueID\>\<\/(\w+:)?Consumer\>)?.*)\n/im
#        expression /ID: (?<id>\d+)\n.*?(Response-Code: (?<code>\d+)\n)?.*?/im
    </parse>
</filter>
<filter log4j.log>
    @type parser
    key_name payload
    reserve_data true
    <parse>
        @type regexp
        expression /\<(\w+:)?Consumer\>\<(\w+:)?UniqueID\>(?<flowLinkId>[a-z0-9\-]+)\<\/(\w+:)?UniqueID\>\<\/(\w+:)?Consumer\>/im
    </parse>
</filter>
<filter log4j.log>
    @type record_transformer
    remove_keys payload
</filter>
<match log4j.log>
    @type rewrite_tag_filter
    <rule>
      key message
      pattern /Inbound Message/
      tag amadeus.response
    </rule>
    <rule>
      key message
      pattern /Outbound Message/
      tag amadeus.request
    </rule>
    <rule>
      key message
      pattern /.+/
      tag amadeus.log
    </rule>
</match>
# add tag to all records
<filter *.**>
  @type record_transformer
  <record>
    tag ${tag}
  </record>
</filter>
<match docker.**>
  @type rewrite_tag_filter
    <rule>
      key tag
      pattern /^docker.(.*)/
      tag $1
    </rule>
</match>
<match *.**>
  @type copy
  # store in loki+grafana
  <store>
    @type loki
    url http://loki:3100
    flush_interval 1s
    flush_at_shutdown true
    buffer_chunk_limit 1m
    extra_labels {"job":"dockerlogs","agent":"fluentd"}
    <label>
        container_name
    </label>
    <label>
        tag
    </label>
    <label>
        code
    </label>
    <label>
        level
    </label>
    <label>
        flowLinkId
    </label>
  </store>
  # copy to stdout
  <store>
    @type stdout
  </store>
</match>
